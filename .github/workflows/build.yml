name: Build

on:
  push:
    paths:
      - '.github/workflows/build.yml'
      - 'src/**/*'
      - 'Cargo.toml'
  pull_request:
    paths:
      - '.github/workflows/build.yml'
      - 'src/**/*'
      - 'Cargo.toml'

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.platform }}

    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build
        run: cargo build --release

      - name: Package
        if: matrix.platform != 'windows-latest'
        run: chmod +x ./package.sh && LIB_FILE=target/release/${{ matrix.platform != 'windows-latest' && 'lib' || '' }}file_metadata${{ matrix.platform == 'windows-latest' && '.dll' || matrix.platform == 'macos-latest' && '.dylib' || '.so' }} ./package.sh

      - name: Package
        if: matrix.platform == 'windows-latest'
        run: LIB_FILE=target/release/${{ matrix.platform != 'windows-latest' && 'lib' || '' }}file_metadata${{ matrix.platform == 'windows-latest' && '.dll' || matrix.platform == 'macos-latest' && '.dylib' || '.so' }}.exe ./package.sh

      - name: Upload binary
        uses: actions/upload-artifact@v2
        with:
          name: lib-${{ matrix.platform }}
          # Find exec based on platform
          path: FileMetadata.*
          